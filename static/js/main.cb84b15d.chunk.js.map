{"version":3,"sources":["api/index.ts","store/postsStore/types.ts","assets/loading.gif","components/post/Post.tsx","store/postsStore/actions.ts","components/posts/Posts.tsx","components/form/Form.tsx","App.tsx","reportWebVitals.ts","store/postsStore/reducer.ts","store/postsStore/index.ts","store/index.ts","index.tsx"],"names":["url","updatePost","id","updatedPost","axios","patch","deletePost","delete","likePost","CREATE","FETCH_ALL","UPDATE","DELETE","LIKE","Post","posts","useSelector","store","postsStore","dispatch","useDispatch","updateHandler","found","find","post","_id","newPost","creator","a","api","data","type","console","log","updatePostAction","deleteHandler","postId","deletePostAction","likeHandler","likePostAction","length","map","item","i","messege","src","selectedFile","alt","width","likeCount","onClick","JSON","stringify","loadingGif","Posts","Form","useState","title","tags","postData","setPostData","fileInput","useRef","submitHandler","current","value","autoComplete","style","display","flexDirection","onSubmit","e","preventDefault","placeholder","onChange","target","required","ref","file","reader","FileReader","readAsDataURL","onload","result","convertImg","files","App","useEffect","get","textAlign","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initaialState","postsReducer","state","action","filter","rootReducer","combineReducers","createStore","RootStore","applyMiddleware","ReduxThunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cb84b15d.chunk.js","sourcesContent":["import axios from 'axios';\nimport { Post } from '../store/postsStore/types';\n\nconst url = 'https://memories4.herokuapp.com/posts';\n\nexport const fetchPosts = () => {\n  return axios.get(url);\n};\n\nexport const createPost = (newPost: Post) => {\n  return axios.post(url, newPost);\n};\n\nexport const updatePost = (id: string, updatedPost: Post) => {\n  return axios.patch(`${url}/${id}`, updatedPost);\n};\n\nexport const deletePost = (id: string) => {\n  return axios.delete(`${url}/${id}`);\n};\n\nexport const likePost = (id: string) => {\n  return axios.patch(`${url}/${id}/likePost`);\n};\n","export const CREATE = 'CREATE';\nexport const FETCH_ALL = 'FETCH_ALL';\nexport const UPDATE = 'UPDATE';\nexport const DELETE = 'DELETE';\nexport const LIKE = 'LIKE';\n\nexport interface AllActions {\n  type: typeof CREATE | typeof FETCH_ALL | typeof UPDATE | typeof DELETE | typeof LIKE;\n  posts: Post[];\n  post: Post;\n  postId: string;\n}\n\nexport type Post = {\n  creator: string;\n  title: string;\n  messege: string;\n  tags: string;\n  selectedFile: string;\n  __v?: number;\n  _id?: string;\n  likeCount?: number;\n  createdAt?: string;\n};\n","export default __webpack_public_path__ + \"static/media/loading.8a29391e.gif\";","/* eslint-disable no-underscore-dangle */\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { RootState } from '../../store';\nimport {\n  deletePostAction,\n  updatePostAction,\n  likePostAction,\n} from '../../store/postsStore/actions';\nimport loadingGif from '../../assets/loading.gif';\n\nconst Post = () => {\n  const posts = useSelector((store: RootState) => {\n    return store.postsStore;\n  });\n\n  const dispatch = useDispatch();\n\n  const updateHandler = (id: string) => {\n    const found = posts.find((post) => post._id === id)!;\n    const newPost = { ...found, creator: 'jezups' };\n    dispatch(updatePostAction(id, newPost));\n    console.log(newPost);\n  };\n\n  const deleteHandler = (id: string) => {\n    dispatch(deletePostAction(id));\n  };\n  const likeHandler = (id: string) => {\n    dispatch(likePostAction(id));\n  };\n\n  return (\n    <div>\n      <div>\n        {posts.length ? (\n          posts.map((item, i) => {\n            return (\n              <div key={JSON.stringify(i)}>\n                <h4>{item.creator}</h4>\n                <div>{item.messege}</div>\n                <img src={item.selectedFile} alt=\"bilde\" width={100} />\n                <h3>Likes: {item.likeCount}</h3>\n                <button\n                  onClick={() => {\n                    likeHandler(item._id!);\n                  }}\n                >\n                  Like\n                </button>\n                <button\n                  onClick={() => {\n                    updateHandler(item._id!);\n                  }}\n                >\n                  edit post\n                </button>\n                <button\n                  onClick={() => {\n                    deleteHandler(item._id!);\n                  }}\n                >\n                  DELETE POST\n                </button>\n                <hr />\n              </div>\n            );\n          })\n        ) : (\n          <img src={loadingGif} alt=\"\" />\n        )}\n      </div>\n    </div>\n  );\n};\nexport default Post;\n","import { Dispatch } from 'redux';\nimport * as api from '../../api';\nimport { FETCH_ALL, CREATE, Post, UPDATE, DELETE, LIKE } from './types';\n\nexport const getAllPosts = () => {\n  return async (dispatch: Dispatch) => {\n    const { data }: { data: Post[] } = await api.fetchPosts();\n    dispatch({ type: FETCH_ALL, posts: data });\n  };\n};\n\nexport const createPostAction = (post: Post) => async (dispatch: Dispatch) => {\n  try {\n    const { data }: { data: Post[] } = await api.createPost(post);\n\n    dispatch({ type: CREATE, post: data });\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n// eslint-disable-next-line max-len\nexport const updatePostAction = (id: string, post: Post) => async (\n  dispatch: Dispatch,\n) => {\n  try {\n    const { data }: { data: Post[] } = await api.updatePost(id, post);\n\n    dispatch({ type: UPDATE, post: data });\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n// eslint-disable-next-line max-len\nexport const deletePostAction = (id: string) => async (dispatch: Dispatch) => {\n  try {\n    await api.deletePost(id);\n    dispatch({ type: DELETE, postId: id });\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const likePostAction = (id: string) => async (dispatch: Dispatch) => {\n  try {\n    await api.likePost(id);\n\n    dispatch({ type: LIKE, postId: id });\n  } catch (error) {\n    console.log(error);\n  }\n};\n","import React from 'react';\nimport Post from '../post/Post';\n\nconst Posts = () => {\n  return (\n    <>\n      <h1>Posts</h1>\n      <Post />\n    </>\n  );\n};\nexport default Posts;\n","import React, { useRef, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { createPostAction } from '../../store/postsStore/actions';\n\nconst Form = () => {\n  const [postData, setPostData] = useState({\n    creator: '',\n    title: '',\n    messege: '',\n    tags: '',\n    selectedFile: '',\n  });\n\n  const fileInput = useRef<HTMLInputElement>(null);\n\n  const dispatch = useDispatch();\n\n  const submitHandler = () => {\n    fileInput.current!.value = '';\n    dispatch(createPostAction(postData));\n    setPostData({\n      creator: '',\n      title: '',\n      messege: '',\n      tags: '',\n      selectedFile: '',\n    });\n  };\n\n  const convertImg = (file: File) => {\n    const reader = new FileReader();\n    reader.readAsDataURL(file);\n    const result = () => {\n      setPostData({ ...postData, selectedFile: reader.result as string });\n    };\n    reader.onload = result;\n  };\n  return (\n    <div>\n      <form\n        autoComplete=\"off\"\n        style={{ display: 'inline-flex', flexDirection: 'column' }}\n        onSubmit={(e) => {\n          e.preventDefault();\n          submitHandler();\n        }}\n      >\n        <h6>Creating a memory</h6>\n\n        <input\n          placeholder=\"Creator\"\n          onChange={(e) => {\n            setPostData({ ...postData, creator: e.target.value });\n          }}\n          value={postData.creator}\n          id=\"name\"\n          type=\"text\"\n          required\n        />\n\n        <input\n          placeholder=\"Title\"\n          onChange={(e) => {\n            setPostData({ ...postData, title: e.target.value });\n          }}\n          value={postData.title}\n          id=\"title\"\n          type=\"text\"\n          required\n        />\n\n        <input\n          placeholder=\"message\"\n          onChange={(e) => {\n            setPostData({ ...postData, messege: e.target.value });\n          }}\n          value={postData.messege}\n          id=\"messege\"\n          type=\"text\"\n          required\n        />\n\n        <input\n          placeholder=\"tags\"\n          onChange={(e) => {\n            setPostData({\n              ...postData,\n              tags: e.target.value,\n              selectedFile: '',\n            });\n          }}\n          value={postData.tags}\n          id=\"tags\"\n          type=\"text\"\n          required\n        />\n        <br />\n        <br />\n\n        <input\n          ref={fileInput}\n          onChange={(e) => {\n            convertImg(e.target.files![0]);\n            setPostData({\n              ...postData,\n              selectedFile: 'converImg(e.target.value)',\n            });\n          }}\n          id=\"file\"\n          type=\"file\"\n          required\n        />\n        <br />\n        <br />\n\n        <button type=\"submit\">Sumbmit</button>\n      </form>\n    </div>\n  );\n};\nexport default Form;\n","import React, { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport Posts from './components/posts/Posts';\nimport Form from './components/form/Form';\nimport { getAllPosts } from './store/postsStore/actions';\n\nconst memories =\n  'https://raw.githubusercontent.com/adrianhajdin/project_mern_memories/master/client/src/images/memories.png?token=AF56X74XONEUGZ4FD2FUIA27UURPI';\n\nconst App = () => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(getAllPosts());\n  \n  }, [dispatch]);\n  return (\n    <div style={{ textAlign: 'center' }} className=\"container\">\n      <h1>Memories</h1>\n      <img src={memories} alt=\"memories\" width={200} />\n      <div>\n        <div>\n          <Posts />\n        </div>\n        <div>\n          <Form />\n        </div>\n      </div>\n    </div>\n  );\n};\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","/* eslint-disable no-underscore-dangle */\nimport {\n  CREATE,\n  AllActions,\n  FETCH_ALL,\n  Post,\n  UPDATE,\n  DELETE,\n  LIKE,\n} from './types';\n\nconst initaialState: Post[] = [];\n\nexport const postsReducer = (\n  state = initaialState,\n  action: AllActions,\n): Post[] => {\n  switch (action.type) {\n    case FETCH_ALL: {\n      return action.posts;\n    }\n    case CREATE: {\n      return [...state, action.post];\n    }\n    case UPDATE: {\n      return state.map((post) =>\n        post._id === action.post._id ? action.post : post,\n      );\n    }\n    case DELETE: {\n      return state.filter((post) => post._id !== action.postId);\n    }\n    case LIKE: {\n      return state.map((post) =>\n        post._id === action.postId\n          ? { ...post, likeCount: post.likeCount! + 1 }\n          : post,\n      );\n    }\n    default:\n      return state;\n  }\n};\n","import { postsReducer } from './reducer';\n\nexport default postsReducer;\n","import { combineReducers } from 'redux';\nimport postsStore from './postsStore';\n\nconst rootReducer = combineReducers({ postsStore });\n\nexport default rootReducer;\n\nexport type RootState = ReturnType<typeof rootReducer>;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { applyMiddleware, createStore } from 'redux';\nimport ReduxThunk from 'redux-thunk';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport RootStore from './store';\n\nconst store = createStore(RootStore, applyMiddleware(ReduxThunk));\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}